-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language HaskellScript.

module AbsHaskellScript where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = Block [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = Decl Ident Expr
    | FunDecl Ident [Type] Ident Expr
    | Cond Expr Block
    | CondElse Expr Block Block
    | Ret Expr
    | VoidRet
    | Print [Expr]
    | Match Ident [Case]
    | SExp Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Case = EmptyList Expr Block | HeadAndRest Ident Ident Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | FunT [Type]
    | ListT Type
    | WildcardT Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | EString String
    | ELitTrue
    | ELitFalse
    | Ternary Expr Expr Expr
    | LongLambda [Ident] Block
    | ConciseLambda [Ident] Expr
    | Spread Expr
    | ListExpr [Expr]
    | EmptyListExpr
    | EApp Expr [Expr]
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

