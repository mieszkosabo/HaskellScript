-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language HaskellScript.

module AbsHaskellScript where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Block a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Decl a Ident (Expr' a)
    | FunDecl a Ident [Type' a] Ident (Expr' a)
    | DataDecl a Udent [TypeArg' a] [Constructor' a]
    | Cond a (Expr' a) (Block' a)
    | CondElse a (Expr' a) (Block' a) (Block' a)
    | Ret a (Expr' a)
    | VoidRet a
    | Print a [Expr' a]
    | Match a Ident [Case' a]
    | SExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Case = Case' BNFC'Position
data Case' a = Case a (Expr' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = Int a
    | Str a
    | Bool a
    | Void a
    | FunT a [Type' a]
    | ListT a (Type' a)
    | WildcardT a Ident
    | DataType a Udent [TypeArg' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TypeArg = TypeArg' BNFC'Position
data TypeArg' a = TypeArg a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Constructor = Constructor' BNFC'Position
data Constructor' a = Constructor a Udent [TypeArg' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | EConstr a Udent
    | ELitInt a Integer
    | EString a String
    | ELitTrue a
    | ELitFalse a
    | Ternary a (Expr' a) (Expr' a) (Expr' a)
    | LongLambda a [Ident] (Block' a)
    | ConciseLambda a [Ident] (Expr' a)
    | Spread a (Expr' a)
    | ListExpr a [Expr' a]
    | EApp a (Expr' a) [Expr' a]
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Udent = Udent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Block where
  hasPosition = \case
    Block p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Decl p _ _ -> p
    FunDecl p _ _ _ _ -> p
    DataDecl p _ _ _ -> p
    Cond p _ _ -> p
    CondElse p _ _ _ -> p
    Ret p _ -> p
    VoidRet p -> p
    Print p _ -> p
    Match p _ _ -> p
    SExp p _ -> p

instance HasPosition Case where
  hasPosition = \case
    Case p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    Void p -> p
    FunT p _ -> p
    ListT p _ -> p
    WildcardT p _ -> p
    DataType p _ _ -> p

instance HasPosition TypeArg where
  hasPosition = \case
    TypeArg p _ -> p

instance HasPosition Constructor where
  hasPosition = \case
    Constructor p _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    EConstr p _ -> p
    ELitInt p _ -> p
    EString p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    Ternary p _ _ _ -> p
    LongLambda p _ _ -> p
    ConciseLambda p _ _ -> p
    Spread p _ -> p
    ListExpr p _ -> p
    EApp p _ _ -> p
    Neg p _ -> p
    Not p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

