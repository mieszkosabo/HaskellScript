-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelHaskellScript where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsHaskellScript

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsHaskellScript.Ident -> Result
transIdent x = case x of
  AbsHaskellScript.Ident string -> failure x

transProgram :: AbsHaskellScript.Program -> Result
transProgram x = case x of
  AbsHaskellScript.Program stmts -> failure x

transBlock :: AbsHaskellScript.Block -> Result
transBlock x = case x of
  AbsHaskellScript.Block stmts -> failure x

transStmt :: AbsHaskellScript.Stmt -> Result
transStmt x = case x of
  AbsHaskellScript.Decl ident expr -> failure x
  AbsHaskellScript.FunDecl ident1 types ident2 expr -> failure x
  AbsHaskellScript.Cond expr block -> failure x
  AbsHaskellScript.CondElse expr block1 block2 -> failure x
  AbsHaskellScript.Ret expr -> failure x
  AbsHaskellScript.VoidRet -> failure x
  AbsHaskellScript.Print exprs -> failure x
  AbsHaskellScript.Match ident cases -> failure x
  AbsHaskellScript.SExp expr -> failure x

transCase :: AbsHaskellScript.Case -> Result
transCase x = case x of
  AbsHaskellScript.Case expr block -> failure x

transType :: AbsHaskellScript.Type -> Result
transType x = case x of
  AbsHaskellScript.Int -> failure x
  AbsHaskellScript.Str -> failure x
  AbsHaskellScript.Bool -> failure x
  AbsHaskellScript.Void -> failure x
  AbsHaskellScript.FunT types -> failure x
  AbsHaskellScript.ListT type_ -> failure x
  AbsHaskellScript.WildcardT ident -> failure x

transExpr :: AbsHaskellScript.Expr -> Result
transExpr x = case x of
  AbsHaskellScript.EVar ident -> failure x
  AbsHaskellScript.ELitInt integer -> failure x
  AbsHaskellScript.EString string -> failure x
  AbsHaskellScript.ELitTrue -> failure x
  AbsHaskellScript.ELitFalse -> failure x
  AbsHaskellScript.Ternary expr1 expr2 expr3 -> failure x
  AbsHaskellScript.LongLambda idents block -> failure x
  AbsHaskellScript.ConciseLambda idents expr -> failure x
  AbsHaskellScript.Spread expr -> failure x
  AbsHaskellScript.ListExpr exprs -> failure x
  AbsHaskellScript.EApp expr exprs -> failure x
  AbsHaskellScript.Neg expr -> failure x
  AbsHaskellScript.Not expr -> failure x
  AbsHaskellScript.EMul expr1 mulop expr2 -> failure x
  AbsHaskellScript.EAdd expr1 addop expr2 -> failure x
  AbsHaskellScript.ERel expr1 relop expr2 -> failure x
  AbsHaskellScript.EAnd expr1 expr2 -> failure x
  AbsHaskellScript.EOr expr1 expr2 -> failure x

transAddOp :: AbsHaskellScript.AddOp -> Result
transAddOp x = case x of
  AbsHaskellScript.Plus -> failure x
  AbsHaskellScript.Minus -> failure x

transMulOp :: AbsHaskellScript.MulOp -> Result
transMulOp x = case x of
  AbsHaskellScript.Times -> failure x
  AbsHaskellScript.Div -> failure x
  AbsHaskellScript.Mod -> failure x

transRelOp :: AbsHaskellScript.RelOp -> Result
transRelOp x = case x of
  AbsHaskellScript.LTH -> failure x
  AbsHaskellScript.LE -> failure x
  AbsHaskellScript.GTH -> failure x
  AbsHaskellScript.GE -> failure x
  AbsHaskellScript.EQU -> failure x
  AbsHaskellScript.NE -> failure x
