print :: a -> Void
const print = \x => { _print(x); };

member :: a -> [a] -> Bool
const member = \a, l => {
  match l:
    case [] {
      return false;
    }
    case [x, ...xs] {
      return x == a ? true : member(a, xs);
    }
};

empty :: [a] -> Bool
const empty = \l => (
  l == []
);

range :: Int -> [Int]
const range = \n => {
  if (n < 0) {
    return [];
  }
  else {
    return [...(range(n - 1)), n];
  }
};

foreach :: (a -> Void) -> [a] -> Void
const foreach = \f, l => {
  match l:
    case [] {
      return;
    }
    case [x, ...xs] {
      f(x);
      foreach(f, xs);
    }
};

map :: (a -> b) -> [a] -> [b]
const map = \f, l => {
  match l:
    case [] {
      return [];
    }
    case [x, ...xs] {
      return [f(x), ...(map(f, xs))];
    }
};

reduce :: (a -> b -> b) -> b -> [a] -> b
const reduce = \f, initVal, l => {
  match l:
    case [] {
      return initVal;
    }
    case [x, ...xs] {
      return f(x, (reduce(f, initVal, xs)));
    }
};

head :: [a] -> a
const head = \l => {
  match l:
    case [x, ...xs] {
      return x;
    }
};

tail :: [a] -> [a]
const tail = \l => {
  match l:
    case [x, ...xs] {
      return xs;
    }
};
