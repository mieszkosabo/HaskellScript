const list = [1, 2, 3];
print(list);

const emptyList = [];
print(emptyList);

match list:
  case [] {
    print("empty!"); // won't happen
  }
  case [x, ...xs] {
    _print("head: ", x); // 1
    _print("tail: ", xs); // [2, 3]
  }

isMember :: a -> [a] -> Bool
const isMember = \a, l => {
  match l:
    case [] {
      return false;
    }
    case [x, ...xs] {
      return x == a ? true : isMember(a, xs);
    }
};

print(isMember(4, list)); // false
print(isMember(2, list)); // true

const a = 1;
const l' = [4, 5, 6];

// spreading operator
const l = [a, 2, 3, ...l', 7];

print(l); // [1, 2, 3, 4, 5, 6, 7]
print([1, 2,...[]]); // [1, 2]