-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt] ;

separator Ident "," ;
-- Lambdas -----------------------------------------------------

ConciseLambda. Lambda ::= "\\" [Ident] "=>" Expr8 ;
LongLambda.    Lambda ::= "\\" [Ident] "=>" Block ;

-- statements ----------------------------------------------

separator  Stmt "" ;

Block.     Block ::= "{" [Stmt] "}" ;

Decl.      Stmt ::= "const" Ident "=" Expr ";" ;

FunDecl.   Stmt ::= Ident "::"  [Type] "const" Ident "=" Lambda ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Block ;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block ;

Ret.       Stmt ::= "return" Expr ";" ;

SExp.      Stmt ::= Expr ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "Int" ;

Str.       Type ::= "String" ;

Bool.      Type ::= "Bool" ;

Void.      Type ::= "Void" ;

FunT.      Type ::= "(" [Type] ")" ;

ListT.     Type ::= "[" Type "]" ;

separator Type "->" ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

EString.   Expr6 ::= String ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

Ternary.   Expr7 ::= Expr8 "?" Expr8 ":" Expr8 ;

LambdaExpr. Expr7 ::= Lambda ;

ListExpr.  Expr6 ::= "[" [Expr] "]" ;

EApp.      Expr8 ::= Ident "(" [Expr] ")" ;

LApp.      Expr6 ::= Expr7 "(" [Expr] ")" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "not" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "and" Expr1 ;

EOr.       Expr ::= Expr1 "or" Expr ;

coercions  Expr 8 ;

separator Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;